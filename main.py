import os
import json
import logging
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo
from urllib.parse import urlparse

from aiohttp import web
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types

# ================== –õ–û–ì–ò ==================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("points-bot")

# ================== –ö–û–ù–§–ò–ì ==================
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN not set")

# Google Sheets
SPREADSHEET_ID = os.getenv("GOOGLE_SPREADSHEET_ID")  # –º–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ –∏–º–µ–Ω–∏
SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "challenge-points")

# –¢–∞–π–º–∑–æ–Ω–∞ –¥–ª—è ¬´—Å–µ–≥–æ–¥–Ω—è¬ª
LOCAL_TZ = os.getenv("LOCAL_TZ", "Europe/Amsterdam")

# –ë–∞–ª–ª—ã/—Ç–µ–≥–∏
POINTS_PER_TAG = int(os.getenv("POINTS_PER_TAG", "5"))
VALID_TAGS = {t.strip().lower() for t in os.getenv("VALID_TAGS", "#—è–∑–¥–µ—Å—å,#—á–µ–ª–ª–µ–Ω–¥–∂1").split(",")}

# –í–µ–±—Ö—É–∫ –∏ —Å–µ—Ä–≤–µ—Ä
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ü–æ–ª–Ω—ã–π URL, –ø—É—Ç—å –±–µ—Ä–µ–º –∫–∞–∫ –µ—Å—Ç—å
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))

# ================== GOOGLE SHEETS ==================
# –ü—Ä–æ—Å–∏–ª–∞ —Å Drive ‚Äî –ø–æ–¥–∫–ª—é—á–∞—é drive.readonly
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.readonly",
]

svc_json_env = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
if not svc_json_env:
    raise RuntimeError("GOOGLE_SERVICE_ACCOUNT_JSON not set")

try:
    service_account_info = json.loads(svc_json_env)
    creds = Credentials.from_service_account_info(service_account_info, scopes=SCOPES)
except Exception as e:
    raise RuntimeError(f"Invalid GOOGLE_SERVICE_ACCOUNT_JSON: {e}")

gc = gspread.authorize(creds)
try:
    if SPREADSHEET_ID:
        sh = gc.open_by_key(SPREADSHEET_ID)
    else:
        sh = gc.open(SHEET_NAME)
    sheet = sh.sheet1
except Exception as e:
    raise RuntimeError(f"Cannot open sheet (id='{SPREADSHEET_ID}' name='{SHEET_NAME}'): {e}")

HEADERS = ["User_id", "Username", "Name", "Points", "Date"]

def ensure_headers():
    try:
        values = sheet.get_all_values()
        if not values:
            sheet.update('1:1', [HEADERS])
            logger.info("–°–æ–∑–¥–∞–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ")
            return
        current = values[0] if values else []
        if current[:len(HEADERS)] != HEADERS:
            sheet.update('1:1', [HEADERS])
            logger.info("–û–±–Ω–æ–≤–∏–ª–∏ —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏")

ensure_headers()

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ==================
def today_str() -> str:
    tz = ZoneInfo(LOCAL_TZ)
    return datetime.now(tz).date().isoformat()

def _safe_int(x) -> int:
    try:
        return int(str(x).strip())
    except Exception:
        return 0

def get_user_points(user_id: int) -> int:
    """–°—É–º–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Points –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id."""
    try:
        records = sheet.get_all_records(expected_headers=HEADERS, default_blank="")
        return sum(
            _safe_int(r.get("Points"))
            for r in records
            if str(r.get("User_id")) == str(user_id)
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
        return 0

def already_checked_today(user_id: int) -> bool:
    try:
        today = today_str()
        records = sheet.get_all_records(expected_headers=HEADERS, default_blank="")
        for r in records:
            if str(r.get("User_id")) == str(user_id) and str(r.get("Date")) == today:
                return True
        return False
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        return False

def human_name(u: types.User) -> str:
    parts = [u.first_name or "", u.last_name or ""]
    return " ".join(p for p in parts if p).strip()

def add_points(user: types.User, points: int):
    row = [
        user.id,
        (user.username or "").strip(),
        human_name(user),
        int(points),
        today_str(),
    ]
    sheet.append_row(row)

async def auto_delete(bot: Bot, chat_id: int, bot_message_id: int, user_message_id: int | None = None, delay: int = 5):
    """–£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)."""
    await asyncio.sleep(delay)
    # —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ–º
    try:
        await bot.delete_message(chat_id, bot_message_id)
    except Exception:
        pass
    # —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–∏ –Ω—É–∂–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö
    if user_message_id:
        try:
            await bot.delete_message(chat_id, user_message_id)
        except Exception:
            pass

# ================== BOT (aiogram v2) ==================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ø–æ—á–∏–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã message.answer() —Ä–∞–±–æ—Ç–∞–ª —Å—Ç–∞–±–∏–ª—å–Ω–æ
Bot.set_current(bot)
Dispatcher.set_current(dp)

@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    sent = await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–º–µ—á–∞–π—Å—è —Ö–µ—à—Ç–µ–≥–æ–º #—è–∑–¥–µ—Å—å –∏–ª–∏ #—á–µ–ª–ª–µ–Ω–¥–∂1. –ö–æ–º–∞–Ω–¥–∞: /–±–∞–ª–∞–Ω—Å, /–∏—Ç–æ–≥–æ")
    asyncio.create_task(auto_delete(bot, message.chat.id, sent.message_id, user_message_id=message.message_id))

@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å", "balance", "–∏—Ç–æ–≥–æ"])
async def cmd_balance(message: types.Message):
    total = get_user_points(message.from_user.id)
    sent = await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {total} –±–∞–ª–ª–æ–≤")
    # —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–≤–µ—Ç, –∏ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫
    asyncio.create_task(auto_delete(bot, message.chat.id, sent.message_id, user_message_id=message.message_id))

@dp.message_handler(lambda m: bool(m.text))
async def handle_text(message: types.Message):
    text = message.text.lower()
    if any(tag in text for tag in VALID_TAGS):
        user = message.from_user
        if already_checked_today(user.id):
            sent = await message.answer("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏—Å—å, –±–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã.")
            asyncio.create_task(auto_delete(bot, message.chat.id, sent.message_id))
            return
        try:
            add_points(user, POINTS_PER_TAG)
            total = get_user_points(user.id)
            sent1 = await message.answer("‚úÖ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!")
            sent2 = await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {total} –±–∞–ª–ª–æ–≤")
            # —É–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º, —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
            asyncio.create_task(auto_delete(bot, message.chat.id, sent1.message_id))
            asyncio.create_task(auto_delete(bot, message.chat.id, sent2.message_id))
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
            sent = await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            asyncio.create_task(auto_delete(bot, message.chat.id, sent.message_id))
    # –∏–Ω–∞—á–µ –º–æ–ª—á–∏–º

# ================== WEBHOOK / AIOHTTP ==================
def _path_from_webhook_url(default_path="/webhook"):
    if WEBHOOK_URL:
        try:
            parsed = urlparse(WEBHOOK_URL)
            return parsed.path or "/"
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å WEBHOOK_URL; –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å")
    return default_path

WEBHOOK_PATH = _path_from_webhook_url("/webhook")

async def on_startup(app):
    if WEBHOOK_URL:
        try:
            await bot.set_webhook(WEBHOOK_URL)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
    else:
        logger.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è, –Ω–æ Telegram –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –∫—É–¥–∞ —Å–ª–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã.")

async def on_shutdown(app):
    try:
        await bot.delete_webhook()
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook")
    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –±–µ–∑ deprecated-–º–µ—Ç–æ–¥–∞
    try:
        session = await bot.get_session()
        await session.close()
    except Exception:
        pass
    logger.info("üëã Shutdown complete")

async def handle_webhook(request):
    try:
        data = await request.json()
        update = types.Update(**data)
        # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        Bot.set_current(bot)
        Dispatcher.set_current(dp)
        await dp.process_update(update)
        return web.Response(status=200)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook")
        return web.Response(status=200)

async def healthcheck(request):
    return web.Response(text="ok")

app = web.Application()
app.router.add_get("/", healthcheck)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ–≤–Ω–æ —Ç–≤–æ–π –ø—É—Ç—å + –¥—É–±–ª—å —Å/–±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–ª–µ—à–∞
app.router.add_post(WEBHOOK_PATH, handle_webhook)
if WEBHOOK_PATH.endswith("/"):
    app.router.add_post(WEBHOOK_PATH.rstrip("/"), handle_webhook)
else:
    app.router.add_post(WEBHOOK_PATH + "/", handle_webhook)

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
