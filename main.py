import logging
import os
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils.executor import start_webhook

import gspread
from google.oauth2.service_account import Credentials

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SHEET_NAME = "–Ø–ó–î–ï–°–¨"

WEBHOOK_HOST = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))

# --- –õ–û–ì–ò ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("points-bot")

# --- BOT ---
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# --- GOOGLE SHEETS ---
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_file("service_account.json", scopes=SCOPES)
gc = gspread.authorize(creds)
sheet = gc.open(SHEET_NAME).sheet1  # –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞

# —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
if not sheet.row_values(1):
    sheet.append_row(["UserID", "Username", "Points", "LastDate"])


# --- –£–¢–ò–õ–ò–¢–´ ---
def get_user_row(user_id: int):
    """–∏—â–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id"""
    records = sheet.get_all_records()
    for i, r in enumerate(records, start=2):  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if str(r["UserID"]) == str(user_id):
            return i, r
    return None, None


def update_points(user: types.User, add_points: int):
    """–æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    today = datetime.utcnow().date()

    row, record = get_user_row(user.id)
    if record:
        last_date = record["LastDate"]
        if str(last_date) == str(today):  # —É–∂–µ –∏–≥—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è
            return False, record["Points"]
        new_points = record["Points"] + add_points
        sheet.update_cell(row, 3, new_points)
        sheet.update_cell(row, 4, str(today))
        return True, new_points
    else:
        sheet.append_row([user.id, user.username or user.full_name, add_points, str(today)])
        return True, add_points


def get_balance(user_id: int):
    _, record = get_user_row(user_id)
    return record["Points"] if record else 0


def get_top(n=10):
    records = sheet.get_all_records()
    sorted_users = sorted(records, key=lambda x: x["Points"], reverse=True)
    return sorted_users[:n]


async def reply_autodel(message: Message, text: str, delay: int = 5):
    sent = await message.reply(text)
    await asyncio.sleep(delay)
    try:
        await sent.delete()
    except Exception:
        pass


# --- –•–≠–ù–î–õ–ï–†–´ ---

@dp.message_handler(commands=["start"])
async def cmd_start(message: Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏ <b>#—è–∑–¥–µ—Å—å</b> –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π +5 –±–∞–ª–ª–æ–≤!\n"
                        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å: /–±–∞–ª–∞–Ω—Å\n"
                        "–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: /—Ç–æ–ø")


@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
async def cmd_balance(message: Message):
    balance = get_balance(message.from_user.id)
    await reply_autodel(message, f"üìä –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –±–∞–ª–ª–æ–≤")


@dp.message_handler(commands=["—Ç–æ–ø"])
async def cmd_top(message: Message):
    top_users = get_top()
    if not top_users:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    text = "üèÜ <b>–¢–û–ü —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n"
    for i, user in enumerate(top_users, start=1):
        name = user['Username'] or f"id{user['UserID']}"
        text += f"{i}. {name} ‚Äî {user['Points']} –±–∞–ª–ª–æ–≤\n"
    await message.reply(text)


@dp.message_handler(lambda m: m.text and "#—è–∑–¥–µ—Å—å" in m.text.lower())
async def hashtag_handler(message: Message):
    ok, points = update_points(message.from_user, 5)
    if ok:
        await reply_autodel(message,
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {message.from_user.first_name}!\n"
                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>+5</b> –±–∞–ª–ª–æ–≤.\n"
                            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{points}</b> üíé")
    else:
        await reply_autodel(message, "‚è≥ –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏—Å—å! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ üòâ")


# --- WEBHOOK ---
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")


async def on_shutdown(dp):
    logger.info("üëã Shutdown complete")
    await bot.delete_webhook()
    await bot.session.close()


if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
