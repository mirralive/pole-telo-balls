import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from collections import defaultdict
from datetime import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("points-bot")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "YOUR_BOT_TOKEN_HERE"

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–ª–æ–≤
user_points = defaultdict(int)
# –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–ª —á–µ–ª–ª–µ–Ω–¥–∂
last_challenge_day = {}

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è #—á–µ–ª–ª–µ–Ω–¥–∂1
@dp.message_handler(lambda m: m.text and "—á–µ–ª–ª–µ–Ω–¥–∂1" in m.text.lower())
async def handle_challenge(message: types.Message):
    logger.info(f"CHAT TYPE: {message.chat.type}")  # —Å–º–æ—Ç—Ä–∏–º —Ç–∏–ø —á–∞—Ç–∞
    user_id = message.from_user.id
    today = datetime.now().date()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ‚Äî 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å
    if last_challenge_day.get(user_id) == today:
        reply = await message.reply("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ #—á–µ–ª–ª–µ–Ω–¥–∂1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        await asyncio.sleep(5)
        await reply.delete()
        return

    # –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã
    user_points[user_id] += 5
    last_challenge_day[user_id] = today

    reply = await message.reply(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>+5 –±–∞–ª–ª–æ–≤</b>!\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>{user_points[user_id]} –±–∞–ª–ª–æ–≤</b> üåü"
    )
    await asyncio.sleep(5)
    await reply.delete()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è /–±–∞–ª–∞–Ω—Å
@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
async def check_balance(message: types.Message):
    logger.info(f"CHAT TYPE: {message.chat.type}")  # –ª–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø
    user_id = message.from_user.id
    balance = user_points[user_id]
    reply = await message.reply(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance} –±–∞–ª–ª–æ–≤</b>")
    await asyncio.sleep(5)
    await reply.delete()
    try:
        await message.delete()  # —É–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å /–±–∞–ª–∞–Ω—Å
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö
@dp.message_handler(commands=["–≤—Å–µ"])
async def show_all(message: types.Message):
    logger.info(f"CHAT TYPE: {message.chat.type}")
    if not user_points:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤.")
        return
    text = "üìä –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:\n"
    for uid, points in user_points.items():
        text += f"üë§ {uid}: {points} –±–∞–ª–ª–æ–≤\n"
    await message.reply(text)

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    logger.info("Starting bot polling...")
    executor.start_polling(dp, skip_updates=True)
