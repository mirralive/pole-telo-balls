# -*- coding: utf-8 -*-
import os
import re
import sqlite3
import logging
import asyncio
from datetime import datetime, timedelta, timezone, date
from contextlib import closing
from urllib.parse import urlparse

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.middlewares import BaseMiddleware

# =========================
#        CONFIG
# =========================
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN") or ""
if not TOKEN:
    raise SystemExit("‚ùå Set TELEGRAM_BOT_TOKEN (or BOT_TOKEN).")

DB_PATH = os.getenv("DB_PATH", "scores.db")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()  # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ ‚Äî –≤–µ–±—Ö—É–∫–∏; –∏–Ω–∞—á–µ polling
HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è "—Å–µ–≥–æ–¥–Ω—è"
TZ_OFFSET_HOURS = int(os.getenv("TZ_OFFSET_HOURS", "0"))

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã
PLUS_ONE_PATTERN = re.compile(
    r"(?i)(^|\s)#\s*\+\s*1(\s|$)|(^|\s)#–±–∞–ª–ª(—ã)?(\s|$)|(^|\s)#–æ—á–∫–∏(\s|$)|(^|\s)#score(\s|$)|(^|\s)#points?(\s|$)"
)
CHALLENGE_CANON = "#—á–µ–ª–ª–µ–Ω–¥–∂1"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("points-bot")

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# =========================
#   RAW UPDATE LOGGER
# =========================
class UpdateLogger(BaseMiddleware):
    async def on_pre_process_update(self, update: types.Update, data: dict):
        # –í—ã–≤–µ–¥–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏—à–ª–æ (—Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞)
        ut = []
        if update.message: ut.append("message")
        if update.edited_message: ut.append("edited_message")
        if update.channel_post: ut.append("channel_post")
        if update.edited_channel_post: ut.append("edited_channel_post")
        if update.callback_query: ut.append("callback_query")
        if update.inline_query: ut.append("inline_query")
        if update.chosen_inline_result: ut.append("chosen_inline_result")
        if update.shipping_query: ut.append("shipping_query")
        if update.pre_checkout_query: ut.append("pre_checkout_query")
        if update.poll: ut.append("poll")
        if update.poll_answer: ut.append("poll_answer")
        if update.my_chat_member: ut.append("my_chat_member")
        if update.chat_member: ut.append("chat_member")
        if update.chat_join_request: ut.append("chat_join_request")
        logger.info("RAW UPDATE TYPES: %s", ",".join(ut) or "UNKNOWN")

dp.middleware.setup(UpdateLogger())

# =========================
#       TIME HELPERS
# =========================
def current_local_date() -> date:
    tz = timezone(timedelta(hours=TZ_OFFSET_HOURS))
    return datetime.now(tz).date()

# =========================
#        DATABASE
# =========================
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS scores (
            chat_id    INTEGER NOT NULL,
            user_id    INTEGER NOT NULL,
            points     INTEGER NOT NULL DEFAULT 0,
            username   TEXT,
            full_name  TEXT,
            PRIMARY KEY (chat_id, user_id)
        )
        """)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS last_tag (
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            day     TEXT NOT NULL,
            PRIMARY KEY (chat_id, user_id)
        )
        """)
        conn.commit()

def add_point(chat_id: int, user: types.User, amount: int = 1) -> int:
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("PRAGMA journal_mode=WAL;")
        with closing(conn.cursor()) as cur:
            cur.execute("""
                INSERT INTO scores(chat_id, user_id, points, username, full_name)
                VALUES (?, ?, 0, ?, ?)
                ON CONFLICT(chat_id, user_id) DO NOTHING
            """, (chat_id, user.id, user.username or "", f"{user.full_name}"))
            cur.execute("""
                UPDATE scores
                SET points = points + ?, username = ?, full_name = ?
                WHERE chat_id = ? AND user_id = ?
            """, (amount, user.username or "", f"{user.full_name}", chat_id, user.id))
            conn.commit()
            cur.execute("SELECT points FROM scores WHERE chat_id = ? AND user_id = ?", (chat_id, user.id))
            row = cur.fetchone()
            return int(row[0]) if row else 0

def get_points(chat_id: int, user_id: int) -> int:
    with sqlite3.connect(DB_PATH) as conn, closing(conn.cursor()) as cur:
        cur.execute("SELECT points FROM scores WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
        row = cur.fetchone()
        return int(row[0]) if row else 0

def get_top(chat_id: int, limit: int = 10):
    with sqlite3.connect(DB_PATH) as conn, closing(conn.cursor()) as cur:
        cur.execute("""
            SELECT user_id, points, COALESCE(username, ''), COALESCE(full_name, '–ë–µ–∑ –∏–º–µ–Ω–∏')
            FROM scores
            WHERE chat_id = ?
            ORDER BY points DESC, user_id ASC
            LIMIT ?
        """, (chat_id, limit))
        return cur.fetchall()

def get_total(chat_id: int) -> int:
    with sqlite3.connect(DB_PATH) as conn, closing(conn.cursor()) as cur:
        cur.execute("SELECT SUM(points) FROM scores WHERE chat_id = ?", (chat_id,))
        row = cur.fetchone()
        return int(row[0]) if row and row[0] else 0

def can_post_tag(chat_id: int, user_id: int) -> bool:
    """–õ–∏–º–∏—Ç: 1 —Ö—ç—à—Ç–µ–≥ –≤ –¥–µ–Ω—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ (–≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö)."""
    today = current_local_date().isoformat()
    with sqlite3.connect(DB_PATH) as conn, closing(conn.cursor()) as cur:
        cur.execute("SELECT day FROM last_tag WHERE chat_id=? AND user_id=?", (chat_id, user_id))
        row = cur.fetchone()
        if row and row[0] == today:
            return False
        cur.execute("""
            INSERT INTO last_tag(chat_id, user_id, day) VALUES (?, ?, ?)
            ON CONFLICT(chat_id, user_id) DO UPDATE SET day=excluded.day
        """, (chat_id, user_id, today))
        conn.commit()
        return True

# =========================
#     TEXT NORMALIZATION
# =========================
ZERO_WIDTH = "".join(["\u200b", "\u200c", "\u200d", "\ufeff"])

def clean_text(s: str) -> str:
    """—á–∏—Å—Ç–∏–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã/–ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ '#', -> lower()."""
    if not s:
        return ""
    s = s.replace("\r", "").replace("\n", " ").strip()
    for ch in ZERO_WIDTH:
        s = s.replace(ch, "")
    s = re.sub(r"#\s+", "#", s)
    return s.lower()

def extract_hashtags_from(text: str, entities) -> list:
    """–±–µ—Ä—ë–º —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ entities/caption_entities –∏ –ø—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ clean_text."""
    tags = []
    if not text or not entities:
        return tags
    for ent in entities:
        if ent.type == "hashtag":
            tag = text[ent.offset: ent.offset + ent.length]
            tags.append(clean_text(tag))
    return tags

# =========================
#         UTILS
# =========================
async def reply_autodel(message: types.Message, text: str, delay: int = 5):
    """–û—Ç–≤–µ—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥."""
    sent = await message.reply(text)
    async def _autodelete():
        await asyncio.sleep(delay)
        try:
            await bot.delete_message(sent.chat.id, sent.message_id)
        except Exception:
            pass
    asyncio.create_task(_autodelete())

async def delete_user_command_if_group(message: types.Message):
    """–£–¥–∞–ª—è–µ–º –°–ê–ú–û —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ ¬´–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è¬ª)."""
    if message.chat and message.chat.type in ("group", "supergroup"):
        try:
            await bot.delete_message(message.chat.id, message.message_id)
        except Exception:
            pass

def is_group(message: types.Message) -> bool:
    return message.chat and message.chat.type in ("group", "supergroup")

# =========================
#        COMMANDS
# =========================
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é –±–∞–ª–ª—ã –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º –≤ —á–∞—Ç–∞—Ö.\n\n"
        "üìå –•—ç—à—Ç–µ–≥–∏:\n"
        "‚Ä¢ <b>#—á–µ–ª–ª–µ–Ω–¥–∂1</b> ‚Üí <b>+5</b> –±–∞–ª–ª–æ–≤ (–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫)\n"
        "‚Ä¢ <b>#–±–∞–ª–ª</b>, <b>#+1</b> –∏ —Ç.–ø. ‚Üí <b>+1</b> –±–∞–ª–ª (–æ—Ç–≤–µ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è)\n\n"
        "‚è≥ –õ–∏–º–∏—Ç: <b>1 —Ö—ç—à—Ç–µ–≥ –≤ –¥–µ–Ω—å</b> –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞.\n\n"
        "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /–±–∞–ª–∞–Ω—Å ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Å—á—ë—Ç\n"
        "‚Ä¢ /top ‚Äî —Ç–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ /all ‚Äî –æ–±—â–∏–π —Å—á—ë—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    )
    await reply_autodel(message, text)
    await delete_user_command_if_group(message)

@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å", "–º–æ–∏–±–∞–ª–ª—ã", "my", "me"])
async def cmd_balance(message: types.Message):
    pts = get_points(message.chat.id, message.from_user.id)
    await reply_autodel(message, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{pts}</b> –±–∞–ª–ª–æ–≤")
    await delete_user_command_if_group(message)

@dp.message_handler(commands=["top", "—Ç–æ–ø"])
async def cmd_top(message: types.Message):
    rows = get_top(message.chat.id, limit=10)
    if not rows:
        await reply_autodel(message, "üì≠ –ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ù–∞—á–Ω–∏—Ç–µ —Å <b>#–±–∞–ª–ª</b> –∏–ª–∏ <b>#—á–µ–ª–ª–µ–Ω–¥–∂1</b>!")
        await delete_user_command_if_group(message)
        return
    lines = ["üèÜ <b>–¢–æ–ø-10 —ç—Ç–æ–≥–æ —á–∞—Ç–∞</b>"]
    for i, (user_id, pts, username, full_name) in enumerate(rows, start=1):
        name = f"@{username}" if username else f'<a href="tg://user?id={user_id}">{full_name}</a>'
        lines.append(f"{i}. {name} ‚Äî <b>{pts}</b> –±–∞–ª–ª–æ–≤")
    await reply_autodel(message, "\n".join(lines))
    await delete_user_command_if_group(message)

@dp.message_handler(commands=["all", "–æ–±—â–∏–π"])
async def cmd_all(message: types.Message):
    total = get_total(message.chat.id)
    await reply_autodel(message, f"üåç –û–±—â–∏–π —Å—á—ë—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{total}</b> –±–∞–ª–ª–æ–≤")
    await delete_user_command_if_group(message)

# =========================
#   GROUP TEXT HANDLER
# =========================
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_group_text(message: types.Message):
    if not is_group(message):
        return
    if message.from_user and message.from_user.is_bot:
        return

    raw = message.text or ""
    cleaned = clean_text(raw)
    tags = set(extract_hashtags_from(message.text, message.entities))

    logger.info("DEBUG(group-text) chat=%s user=%s text=%r cleaned=%r tags=%r",
                message.chat.id, message.from_user.id if message.from_user else None, raw, cleaned, tags)

    # CHALLENGE +5
    if (CHALLENGE_CANON in tags) or re.search(r'(?<!\w)#—á–µ–ª–ª–µ–Ω–¥–∂1(?!\w)', cleaned):
        if not can_post_tag(message.chat.id, message.from_user.id):
            await reply_autodel(message, "‚è≥ –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ö—ç—à—Ç–µ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
            return
        new_points = add_point(message.chat.id, message.from_user, amount=5)
        await reply_autodel(message, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ <b>+5</b> –±–∞–ª–ª–æ–≤.\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{new_points}</b>")
        return

    # PLUS ONE +1
    if any(t in ("#–±–∞–ª–ª", "#–±–∞–ª–ª—ã", "#–æ—á–∫–∏", "#score", "#point", "#points", "#+1") for t in tags) \
       or PLUS_ONE_PATTERN.search(cleaned):
        if not can_post_tag(message.chat.id, message.from_user.id):
            await reply_autodel(message, "‚è≥ –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ö—ç—à—Ç–µ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
            return
        new_points = add_point(message.chat.id, message.from_user, amount=1)
        await message.reply(f"‚úÖ –ë–∞–ª–ª –∑–∞—Å—á–∏—Ç–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{new_points}</b>.")

# =========================
#   GROUP MEDIA (caption)
# =========================
@dp.message_handler(content_types=[
    types.ContentType.PHOTO,
    types.ContentType.VIDEO,
    types.ContentType.ANIMATION,
    types.ContentType.DOCUMENT,
    types.ContentType.AUDIO,
    types.ContentType.VOICE,
    types.ContentType.VIDEO_NOTE,
])
async def handle_group_media(message: types.Message):
    if not is_group(message):
        return
    if message.from_user and message.from_user.is_bot:
        return

    caption = message.caption or ""
    cleaned = clean_text(caption)
    tags = set(extract_hashtags_from(message.caption, message.caption_entities))

    logger.info("DEBUG(group-media) chat=%s user=%s caption=%r cleaned=%r tags=%r",
                message.chat.id, message.from_user.id if message.from_user else None, caption, cleaned, tags)

    # CHALLENGE +5
    if (CHALLENGE_CANON in tags) or re.search(r'(?<!\w)#—á–µ–ª–ª–µ–Ω–¥–∂1(?!\w)', cleaned):
        if not can_post_tag(message.chat.id, message.from_user.id):
            await reply_autodel(message, "‚è≥ –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ö—ç—à—Ç–µ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
            return
        new_points = add_point(message.chat.id, message.from_user, amount=5)
        await reply_autodel(message, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ <b>+5</b> –±–∞–ª–ª–æ–≤.\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{new_points}</b>")
        return

    # PLUS ONE +1
    if any(t in ("#–±–∞–ª–ª", "#–±–∞–ª–ª—ã", "#–æ—á–∫–∏", "#score", "#point", "#points", "#+1") for t in tags) \
       or PLUS_ONE_PATTERN.search(cleaned):
        if not can_post_tag(message.chat.id, message.from_user.id):
            await reply_autodel(message, "‚è≥ –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ö—ç—à—Ç–µ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
            return
        new_points = add_point(message.chat.id, message.from_user, amount=1)
        await message.reply(f"‚úÖ –ë–∞–ª–ª –∑–∞—Å—á–∏—Ç–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{new_points}</b>.")

# =========================
#   CATCH-ALL DEBUG (group)
# =========================
@dp.message_handler(content_types=types.ContentType.ANY)
async def catch_all_group(message: types.Message):
    """–õ–æ–≤–∏–º –≤–æ–æ–±—â–µ –≤—Å—ë –≤ –≥—Ä—É–ø–ø–µ ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –¥–æ–µ–∑–∂–∞–µ—Ç."""
    if not is_group(message):
        return
    logger.info("CATCH-ALL(group) type=%s text=%r caption=%r entities=%r caption_entities=%r",
                message.content_type,
                getattr(message, "text", None),
                getattr(message, "caption", None),
                getattr(message, "entities", None),
                getattr(message, "caption_entities", None))

# =========================
#        STARTUP
# =========================
async def startup_common():
    me = await bot.get_me()
    logger.info(f"Authorized as @{me.username} (id={me.id})")
    if WEBHOOK_URL:
        # –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ ¬´—Ñ–∏–ª—å—Ç—Ä—É–µ–º¬ª allowed_updates ‚Äî –ø—É—Å—Ç—å —Ç–≥ —à–ª—ë—Ç –≤—Å—ë
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logger.info(f"Webhook set to {WEBHOOK_URL}")
    else:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook deleted. Using polling.")

def main():
    init_db()
    if WEBHOOK_URL:
        parsed = urlparse(WEBHOOK_URL)
        webhook_path = parsed.path or "/webhook"
        executor.start_webhook(
            dispatcher=dp,
            webhook_path=webhook_path,
            on_startup=lambda _: asyncio.get_event_loop().create_task(startup_common()),
            skip_updates=True,
            host=HOST,
            port=PORT,
        )
    else:
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=lambda _: asyncio.get_event_loop().create_task(startup_common()),
        )

if __name__ == "__main__":
    main()
