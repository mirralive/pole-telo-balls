import os
import json
import logging
import asyncio
from datetime import datetime, timezone

from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils.executor import start_webhook

import gspread
from google.oauth2.service_account import Credentials


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

WEBHOOK_HOST = os.getenv("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://<your-subdomain>.onrender.com
if not WEBHOOK_HOST:
    raise RuntimeError("WEBHOOK_URL is not set")

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", "10000"))

# –ù–∞–∑–≤–∞–Ω–∏–µ Google Sheets (—Ñ–∞–π–ª –≤ —Ç–≤–æ—ë–º Google Drive)
SHEET_NAME = "–Ø–ó–î–ï–°–¨"

# –°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –∑–∞ –æ—Ç–º–µ—Ç–∫—É
POINTS_PER_TAG = 5

# –°–∞–º —Ç–µ–≥ (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω)
TAG_TEXT = "—è–∑–¥–µ—Å—å"  # –±–µ–∑ —Ä–µ—à—ë—Ç–∫–∏, –º—ã –µ—ë —É–±–µ—Ä—ë–º –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏


# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("points-bot")


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# === GOOGLE SHEETS —á–µ—Ä–µ–∑ ENV JSON/BASE64 ===
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

svc_json_env = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
svc_b64_env = os.getenv("GOOGLE_SERVICE_ACCOUNT_BASE64")

service_account_info = None
if svc_json_env:
    try:
        service_account_info = json.loads(svc_json_env)
    except json.JSONDecodeError:
        raise RuntimeError("GOOGLE_SERVICE_ACCOUNT_JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
elif svc_b64_env:
    import base64
    try:
        decoded = base64.b64decode(svc_b64_env).decode("utf-8")
        service_account_info = json.loads(decoded)
    except Exception as e:
        raise RuntimeError("GOOGLE_SERVICE_ACCOUNT_BASE64 –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω") from e
else:
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å GOOGLE_SERVICE_ACCOUNT_JSON (–∏–ª–∏ GOOGLE_SERVICE_ACCOUNT_BASE64)")

from google.oauth2.service_account import Credentials
creds = Credentials.from_service_account_info(service_account_info, scopes=SCOPES)
gc = gspread.authorize(creds)
sheet = gc.open(SHEET_NAME).sheet1
if not sheet.row_values(1):
    sheet.append_row(["UserID", "Username", "Points", "LastDate"])

# === –£–¢–ò–õ–ò–¢–´ –†–ê–ë–û–¢–´ –° –¢–ê–ë–õ–ò–¶–ï–ô ===
def _today_utc_str() -> str:
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–µ–Ω—å –≤ UTC, —á—Ç–æ–±—ã –ª–æ–≥–∏–∫–∞ –±—ã–ª–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    return datetime.now(timezone.utc).date().isoformat()


def _fetch_records() -> list[dict]:
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã: Points ‚Üí int, LastDate ‚Üí str (ISO)
    records = sheet.get_all_records()
    for r in records:
        # gspread –≤–µ—Ä–Ω—ë—Ç int/float/str ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        try:
            r["Points"] = int(r.get("Points", 0))
        except Exception:
            r["Points"] = 0
        # LastDate –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–π
        r["LastDate"] = str(r.get("LastDate", "")).strip()
        r["UserID"] = str(r.get("UserID", "")).strip()
        r["Username"] = str(r.get("Username", "")).strip()
    return records


def _find_user_row(user_id: int) -> tuple[int | None, dict | None]:
    """–ù–∞–π–¥—ë—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–ø–∏—Å—å). –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ —Å 1."""
    uid = str(user_id)
    records = _fetch_records()
    for idx, rec in enumerate(records, start=2):  # —Å 2, —Ç.–∫. –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ 1
        if rec["UserID"] == uid:
            return idx, rec
    return None, None


def get_balance(user_id: int) -> int:
    _, rec = _find_user_row(user_id)
    return rec["Points"] if rec else 0


def add_points_if_first_today(user: types.User, add_points: int) -> tuple[bool, int]:
    """
    –î–æ–±–∞–≤–∏—Ç –±–∞–ª–ª—ã, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—Ç–∫–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ.
    –í–µ—Ä–Ω—ë—Ç (–¥–æ–±–∞–≤–ª–µ–Ω–æ_–ª–∏, –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å).
    """
    today = _today_utc_str()
    row, rec = _find_user_row(user.id)
    if rec:
        if rec["LastDate"] == today:
            # –£–∂–µ –æ—Ç–º–µ—á–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è
            return False, rec["Points"]
        new_points = rec["Points"] + add_points
        sheet.update_cell(row, 3, new_points)   # Points (–∫–æ–ª–æ–Ω–∫–∞ 3)
        sheet.update_cell(row, 4, today)        # LastDate (–∫–æ–ª–æ–Ω–∫–∞ 4)
        return True, new_points
    else:
        # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
        username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip() or f"id{user.id}"
        sheet.append_row([str(user.id), username, add_points, today])
        return True, add_points


def get_top(n: int = 10) -> list[dict]:
    recs = _fetch_records()
    recs.sort(key=lambda x: x["Points"], reverse=True)
    return recs[:n]


async def reply_autodel(message: Message, text: str, delay: int = 5):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥."""
    sent = await message.reply(text, disable_web_page_preview=True)
    await asyncio.sleep(delay)
    try:
        await sent.delete()
    except Exception:
        pass


def message_has_tag(msg: Message, wanted: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞ –ø–æ entity (–Ω–∞–¥—ë–∂–Ω–µ–µ, —á–µ–º –∏—Å–∫–∞—Ç—å –ø–æ–¥—Å—Ç—Ä–æ–∫—É).
    wanted –æ–∂–∏–¥–∞–µ—Ç—Å—è –±–µ–∑ '#', —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
    """
    if not msg.text:
        return False
    low = msg.text.casefold()
    # –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å: –≤–¥—Ä—É–≥ –ø—Ä–æ—Å—Ç–æ –µ—Å—Ç—å –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞
    if f"#{wanted}" in low:
        return True

    if msg.entities:
        for ent in msg.entities:
            if ent.type == "hashtag":
                tag = msg.text[ent.offset: ent.offset + ent.length]  # –≤–∫–ª—é—á–∞—è '#'
                if tag.lstrip("#").casefold() == wanted:
                    return True
    return False


# === –•–≠–ù–î–õ–ï–†–´ ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–û—Ç–º–µ—á–∞–π—Å—è —Ö–µ—à—Ç–µ–≥–æ–º <b>#—è–∑–¥–µ—Å—å</b> –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π +5 –±–∞–ª–ª–æ–≤.\n\n"
        "üìä –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /–±–∞–ª–∞–Ω—Å ‚Äî –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (–æ—Ç–≤–µ—Ç –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫)\n"
        "‚Ä¢ /—Ç–æ–ø ‚Äî –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    )


@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
async def cmd_balance(message: Message):
    balance = get_balance(message.from_user.id)
    await reply_autodel(message, f"üìä –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance}</b> –±–∞–ª–ª–æ–≤")


@dp.message_handler(commands=["—Ç–æ–ø"])
async def cmd_top(message: Message):
    top = get_top(10)
    if not top:
        await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    lines = ["üèÜ <b>–¢–û–ü —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n"]
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    for i, u in enumerate(top, start=1):
        name = u["Username"] or f"id{u['UserID']}"
        prefix = medals.get(i, f"{i}.")
        lines.append(f"{prefix} {name} ‚Äî {u['Points']} –±–∞–ª–ª–æ–≤")
    await message.reply("\n".join(lines))


@dp.message_handler(lambda m: message_has_tag(m, TAG_TEXT))
async def on_hashtag(message: Message):
    added, new_balance = add_points_if_first_today(message.from_user, POINTS_PER_TAG)
    if added:
        # –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–∏—Å—á–µ–∑–∞–µ—Ç)
        await reply_autodel(
            message,
            f"üéâ –£—Ä–∞, {message.from_user.first_name}!\n"
            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>+{POINTS_PER_TAG}</b> –±–∞–ª–ª–æ–≤.\n"
            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{new_balance}</b> üíé",
            delay=5,
        )
    else:
        # —É–∂–µ –æ—Ç–º–µ—á–∞–ª—Å—è (–∏—Å—á–µ–∑–∞–µ—Ç)
        await reply_autodel(
            message,
            "‚è≥ –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏—Å—å! –ñ–¥—É –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ üòâ",
            delay=5,
        )


# === –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ (WEBHOOK) ===
async def on_startup(dp: Dispatcher):
    await bot.delete_webhook()  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook set: {WEBHOOK_URL}")


async def on_shutdown(dp: Dispatcher):
    logger.info("üëã Shutdown...")
    try:
        await bot.delete_webhook()
    except Exception:
        pass
    await bot.session.close()
    logger.info("üëã Shutdown complete")


if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
