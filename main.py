# -*- coding: utf-8 -*-
import os
import re
import sqlite3
import logging
import asyncio
from contextlib import closing

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import ConflictError

# --- Configuration ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN") or ""
if not TOKEN:
    raise SystemExit("‚ùå Set TELEGRAM_BOT_TOKEN environment variable with your bot token.")

DB_PATH = os.getenv("DB_PATH", "scores.db")

# –û–±—ã—á–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏ –¥–ª—è +1
HASHTAG_PATTERN = re.compile(r"(?i)(#\s*\+\s*1|#–±–∞–ª–ª(—ã)?|#–æ—á–∫–∏|#score|#point|#points)\b")

# –°–ø–µ—Ü-–∫–ª—é—á –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ (+5)
CHALLENGE_TAG = "#—á–µ–ª–ª–µ–Ω–¥–∂1"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("points-bot")

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# --- Database helpers ---
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS scores (
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            points  INTEGER NOT NULL DEFAULT 0,
            username TEXT,
            full_name TEXT,
            PRIMARY KEY (chat_id, user_id)
        )
        """)
        conn.commit()

def add_point(chat_id: int, user: types.User, amount: int = 1) -> int:
    """–ü—Ä–∏–±–∞–≤–ª—è–µ—Ç amount –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å."""
    if amount == 0:
        return get_points(chat_id, user.id)
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("PRAGMA journal_mode=WAL;")
        with closing(conn.cursor()) as cur:
            cur.execute("""
                INSERT INTO scores(chat_id, user_id, points, username, full_name)
                VALUES (?, ?, 0, ?, ?)
                ON CONFLICT(chat_id, user_id) DO NOTHING
            """, (chat_id, user.id, user.username or "", f"{user.full_name}"))
            cur.execute("""
                UPDATE scores SET points = points + ?, username = ?, full_name = ?
                WHERE chat_id = ? AND user_id = ?
            """, (amount, user.username or "", f"{user.full_name}", chat_id, user.id))
            conn.commit()
            cur.execute("SELECT points FROM scores WHERE chat_id = ? AND user_id = ?", (chat_id, user.id))
            row = cur.fetchone()
            return int(row[0]) if row else 0

def get_points(chat_id: int, user_id: int) -> int:
    with sqlite3.connect(DB_PATH) as conn, closing(conn.cursor()) as cur:
        cur.execute("SELECT points FROM scores WHERE chat_id = ? AND user_id = ?", (chat_id, user_id))
        row = cur.fetchone()
        return int(row[0]) if row else 0

def get_top(chat_id: int, limit: int = 10):
    with sqlite3.connect(DB_PATH) as conn, closing(conn.cursor()) as cur:
        cur.execute("""
            SELECT user_id, points, COALESCE(username, ''), COALESCE(full_name, '–ë–µ–∑ –∏–º–µ–Ω–∏')
            FROM scores WHERE chat_id = ?
            ORDER BY points DESC, user_id ASC
            LIMIT ?
        """, (chat_id, limit))
        return cur.fetchall()

# --- Help/commands ---
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é –±–∞–ª–ª—ã –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö (–≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π).\n\n"
        "–ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –æ—á–∫–∏:\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏: <b>#—á–µ–ª–ª–µ–Ω–¥–∂1</b> ‚Äî –ø–æ–ª—É—á–∏—à—å <b>+5</b> –±–∞–ª–ª–æ–≤.\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏: <b>#–±–∞–ª–ª</b> –∏–ª–∏ <b>#+1</b> ‚Äî –ø–æ–ª—É—á–∏—à—å <b>+1</b> –±–∞–ª–ª.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ /–º–æ–∏–±–∞–ª–ª—ã ‚Äî —Ç–æ –∂–µ —Å–∞–º–æ–µ\n"
        "‚Ä¢ /top ‚Äî —Ç–æ–ø-10 –ø–æ —á–∞—Ç—É\n\n"
        "<i>–í–∞–∂–Ω–æ: –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ –∫–∞–Ω–∞–ª—É –≥—Ä—É–ø–ø—É-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ—Ç–∫–ª—é—á–∏ Privacy –≤ @BotFather.</i>"
    )
    await message.reply(text)

@dp.message_handler(commands=["–º–æ–∏–±–∞–ª–ª—ã", "my", "me", "moi", "moibal"])
async def cmd_my(message: types.Message):
    pts = get_points(message.chat.id, message.from_user.id)
    await message.reply(f"–¢–≤–æ–∏ –±–∞–ª–ª—ã: <b>{pts}</b>")

@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
async def cmd_balance(message: types.Message):
    pts = get_points(message.chat.id, message.from_user.id)
    await message.reply(f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{pts}</b>")

@dp.message_handler(commands=["top", "—Ç–æ–ø"])
async def cmd_top(message: types.Message):
    rows = get_top(message.chat.id, limit=10)
    if not rows:
        await message.reply("–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ù–∞–ø–∏—à–∏ #–±–∞–ª–ª –∏–ª–∏ #—á–µ–ª–ª–µ–Ω–¥–∂1 –≤ —ç—Ç–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    lines = ["üèÜ <b>–¢–æ–ø —ç—Ç–æ–≥–æ —á–∞—Ç–∞</b>"]
    for i, (user_id, pts, username, full_name) in enumerate(rows, start=1):
        name = f"@{username}" if username else f'<a href="tg://user?id={user_id}">{full_name}</a>'
        lines.append(f"{i}. {name} ‚Äî <b>{pts}</b>")
    await message.reply("\n".join(lines), disable_web_page_preview=True)

# --- Messages / scoring ---
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
    if message.chat.type not in ("group", "supergroup"):
        return
    if not message.text:
        return
    if message.from_user and message.from_user.is_bot:
        return

    text_lc = message.text.strip().lower()

    # 1) –°–ø–µ—Ü-–ø—Ä–∞–≤–∏–ª–æ: #—á–µ–ª–ª–µ–Ω–¥–∂1 = +5
    if CHALLENGE_TAG in text_lc:
        new_points = add_point(message.chat.id, message.from_user, amount=5)
        sent = await message.reply(
            f"‚úÖ –í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ <b>+5</b> –±–∞–ª–ª–æ–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{new_points}</b>"
        )
        # –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        async def _autodelete():
            await asyncio.sleep(5)
            try:
                await bot.delete_message(sent.chat.id, sent.message_id)
            except Exception:
                pass
        asyncio.create_task(_autodelete())
        return

    # 2) –û–±—ã—á–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏ (+1)
    if HASHTAG_PATTERN.search(text_lc):
        new_points = add_point(message.chat.id, message.from_user, amount=1)
        await message.reply(f"‚úÖ –ë–∞–ª–ª –∑–∞—Å—á–∏—Ç–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{new_points}</b>.")

# --- Startup hook: drop webhook to avoid conflicts with polling ---
async def on_startup(dp: Dispatcher):
    try:
        # —Å–Ω–∏–º–∞–µ–º webhook –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ¬´–≤–∏—Å—è—â–∏–µ¬ª –∞–ø–¥–µ–π—Ç—ã
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook deleted (if any). Switching to polling.")
    except Exception as e:
        logger.warning(f"Couldn't delete webhook: {e}")

def main():
    init_db()
    logger.info("Starting bot polling...")
    try:
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except ConflictError as e:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ª–æ–≤–∏–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –≤–µ–±—Ö—É–∫–∞
        logger.error(f"Polling conflict: {e}")
        # –≤—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        async def restart():
            await asyncio.sleep(2)
            await on_startup(dp)
            executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
        asyncio.get_event_loop().run_until_complete(restart())

if __name__ == "__main__":
    main()
