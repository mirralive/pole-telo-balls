import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ==============================
# –õ–û–ì–ò
# ==============================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("points-bot")

# ==============================
# –¢–û–ö–ï–ù (—Ç–æ–ª—å–∫–æ –∏–∑ Environment!)
# ==============================
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Environment!")

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# ==============================
# –ü–†–ò–ú–ï–†: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Ö—ç—à—Ç–µ–≥
# ==============================
@dp.message_handler(lambda message: message.text and "#—á–µ–ª–ª–µ–Ω–¥–∂1" in message.text)
async def handle_challenge(message: types.Message):
    await message.reply("üéâ –ó–∞—Å—á–∏—Ç–∞–Ω–æ +5 –±–∞–ª–ª–æ–≤!")

# ==============================
# –ü–†–ò–ú–ï–†: –∫–æ–º–∞–Ω–¥–∞ /–±–∞–ª–∞–Ω—Å
# ==============================
@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å"])
async def handle_balance(message: types.Message):
    await message.reply("–í–∞—à –±–∞–ª–∞–Ω—Å: 0 (—Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)")

# ==============================
# –°–¢–ê–†–¢
# ==============================
if __name__ == "__main__":
    logger.info("üöÄ Starting bot polling...")
    executor.start_polling(dp, skip_updates=True)
