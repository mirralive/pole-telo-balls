import os
import json
import logging
from datetime import datetime
from zoneinfo import ZoneInfo

from aiohttp import web
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("points-bot")

# ---------- –ö–æ–Ω—Ñ–∏–≥–∏ ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN not set")

SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "challenge-points")

# –¢–∞–π–º–∑–æ–Ω–∞ –¥–ª—è "—Å–µ–≥–æ–¥–Ω—è"
LOCAL_TZ = os.getenv("LOCAL_TZ", "Europe/Amsterdam")

# URL —Ö–æ—Å—Ç–∞ (Render –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç RENDER_EXTERNAL_URL)
# --- Webhook config ---
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ø–í–ù–û –∑–∞–¥–∞—ë–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º
WEBHOOK_PATH = "/webhook"               # —Ä–æ—É—Ç –æ—Å—Ç–∞—ë—Ç—Å—è
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))

POINTS_PER_TAG = int(os.getenv("POINTS_PER_TAG", "5"))
# –ü–æ–¥–¥–µ—Ä–∂–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–µ—à—Ç–µ–≥–æ–≤, —Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
VALID_TAGS = {t.strip().lower() for t in os.getenv("VALID_TAGS", "#—è–∑–¥–µ—Å—å,#—á–µ–ª–ª–µ–Ω–¥–∂1").split(",")}

# ---------- Google Sheets ----------
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.readonly",
]
svc_json_env = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
if not svc_json_env:
    raise RuntimeError("GOOGLE_SERVICE_ACCOUNT_JSON not set")

try:
    service_account_info = json.loads(svc_json_env)
    creds = Credentials.from_service_account_info(service_account_info, scopes=SCOPES)
except Exception as e:
    raise RuntimeError(f"Invalid GOOGLE_SERVICE_ACCOUNT_JSON: {e}")

gc = gspread.authorize(creds)
try:
    sheet = gc.open(SHEET_NAME).sheet1
except Exception as e:
    raise RuntimeError(f"Cannot open sheet '{SHEET_NAME}': {e}")

HEADERS = ["User_id", "Username", "Name", "Points", "Date"]

def ensure_headers():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–π –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏."""
    try:
        values = sheet.get_all_values()
        if not values:
            sheet.update('1:1', [HEADERS])
            logger.info("–°–æ–∑–¥–∞–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ")
            return
        current = values[0] if values else []
        if current[:len(HEADERS)] != HEADERS:
            sheet.update('1:1', [HEADERS])
            logger.info("–û–±–Ω–æ–≤–∏–ª–∏ —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏")

ensure_headers()

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------
def today_str() -> str:
    tz = ZoneInfo(LOCAL_TZ)
    return datetime.now(tz).date().isoformat()

def get_user_points(user_id: int) -> int:
    try:
        records = sheet.get_all_records(expected_headers=HEADERS, default_blank="")
        return sum(int(r.get("Points") or 0) for r in records if str(r.get("User_id")) == str(user_id))
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
        return 0

def already_checked_today(user_id: int) -> bool:
    try:
        today = today_str()
        records = sheet.get_all_records(expected_headers=HEADERS, default_blank="")
        for r in records:
            if str(r.get("User_id")) == str(user_id) and str(r.get("Date")) == today:
                return True
        return False
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        return False

def human_name(u: types.User) -> str:
    parts = [u.first_name or "", u.last_name or ""]
    name = " ".join(p for p in parts if p).strip()
    return name

def add_points(user: types.User, points: int):
    row = [
        user.id,
        (user.username or "").strip(),
        human_name(user),
        int(points),
        today_str(),
    ]
    sheet.append_row(row)  # RAW –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

# ---------- Bot ----------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–º–µ—á–∞–π—Å—è —Ö–µ—à—Ç–µ–≥–æ–º #—è–∑–¥–µ—Å—å –∏–ª–∏ #—á–µ–ª–ª–µ–Ω–¥–∂1. –ö–æ–º–∞–Ω–¥–∞: /–±–∞–ª–∞–Ω—Å")

@dp.message_handler(commands=["–±–∞–ª–∞–Ω—Å", "balance"])
async def cmd_balance(message: types.Message):
    total = get_user_points(message.from_user.id)
    await message.reply(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {total} –±–∞–ª–ª–æ–≤")

@dp.message_handler(lambda m: bool(m.text))
async def handle_text(message: types.Message):
    text = message.text.lower()
    if any(tag in text for tag in VALID_TAGS):
        user = message.from_user
        if already_checked_today(user.id):
            await message.reply("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏—Å—å, –±–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã.")
            return
        try:
            add_points(user, POINTS_PER_TAG)
            total = get_user_points(user.id)
            await message.reply(f"‚úÖ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã! –í–∞—à –±–∞–ª–∞–Ω—Å: {total}")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    # –∏–Ω–∞—á–µ ‚Äî –º–æ–ª—á–∏–º, –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ö–µ—à—Ç–µ–≥–∏ –∏ –∫–æ–º–∞–Ω–¥—ã

# ---------- Webhook ----------

async def on_startup(app):
    if WEBHOOK_URL:
        try:
            await bot.set_webhook(WEBHOOK_URL)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
    else:
        logger.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞")

async def on_shutdown(app):
    try:
        await bot.delete_webhook()
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook")
    await bot.session.close()
    logger.info("üëã Shutdown complete")


async def handle_webhook(request):
    try:
        data = await request.json()
        update = types.Update(**data)  # –í–ê–ñ–ù–û: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞—Ç—å Update –¥–ª—è aiogram v2
        await dp.process_update(update)
        return web.Response(status=200)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook")
        return we
